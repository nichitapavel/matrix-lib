/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package matrix.lib;

import org.junit.*;

import static org.junit.Assert.*;

public class MatrixTest {

    @Test
    public void TestMatrixMultiplication() {
        /*
        Matrix A
        2 7 5 8 4
        5 0 5 2 5
        6 7 9 8 7
        8 5 0 1 6
        7 9 2 6 4
        Matrix B
        2 2 0 3 4
        0 0 0 2 0
        1 2 4 3 2
        3 0 0 1 1
        2 4 2 1 4
        Matrix C
        41 30 28 47 42
        31 40 30 37 52
        59 58 50 74 78
        31 40 12 41 57
        42 34 16 55 54
        */
        int size = 5;
        Matrix matrix_a = new Matrix(size);
        Matrix matrix_b = new Matrix(size);
        Matrix matrix_expected = new Matrix(size);

        int[] matrix_a_data = {2, 7, 5, 8, 4, 5, 0, 5, 2, 5, 6, 7, 9, 8, 7, 8, 5, 0, 1, 6, 7, 9, 2, 6, 4};
        int[] matrix_b_data = {2, 2, 0, 3, 4, 0, 0, 0, 2, 0, 1, 2, 4, 3, 2, 3, 0, 0, 1, 1, 2, 4, 2, 1, 4};
        int[] matrix_expected_data =
                {41, 30, 28, 47, 42, 31, 40, 30, 37, 52, 59, 58, 50, 74, 78, 31, 40, 12, 41, 57, 42, 34, 16, 55, 54};

        try {
            matrix_a.set(matrix_a_data);
            matrix_b.set(matrix_b_data);
            matrix_expected.set(matrix_expected_data);
        } catch (Exception ex) {
            fail();
        }
        TimeController time = new TimeController();

        Matrix matrix_computed = matrix_a.multiply(matrix_b);

        // assert statements
        assertEquals(
                "Result of matrix multiplication must be equal to expected matrix",
                matrix_expected, matrix_computed
        );
    }

    @Test
    public void TesttoString() {
        Matrix matrix = new Matrix(3);
        int[] matrix_data = {0, 1, 2, 3, 4, 5, 6, 7, 8};
        try {
            matrix.set(matrix_data);
        } catch (Exception ex) {
            fail();
        }

        String expected_string = "0\t1\t2\t\n3\t4\t5\t\n6\t7\t8\t\n";
        assertEquals(
                "Expected string and resulted string does not match",
                expected_string, matrix.toString()
        );
    }

    @Test
    public void Testfill() {
        Matrix matrix_a = new Matrix(5);
        matrix_a.fill(40);
        Matrix matrix_b = new Matrix(5);
        matrix_b.fill(40);

        assertNotEquals(matrix_a, matrix_b);
    }

    @Test(timeout=50000)
    public void TestLargeMatrixMultiplication() {
        Matrix matrix_a = new Matrix(1000);
        matrix_a.fill(40);
        Matrix matrix_b = new Matrix(1000);
        matrix_b.fill(40);

        matrix_a.multiply(matrix_b);
    }
}
