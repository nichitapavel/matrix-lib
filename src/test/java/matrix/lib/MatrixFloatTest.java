/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package matrix.lib;

import org.junit.*;

import static org.junit.Assert.*;

public class MatrixFloatTest {

    @Test
    public void TestMatrixMultiplication() {
        /*
        Matrix B
        2 7 5 8 4
        5 0 5 2 5
        6 7 9 8 7
        8 5 0 1 6
        7 9 2 6 4
        Matrix B
        2 2 0 3 4
        0 0 0 2 0
        1 2 4 3 2
        3 0 0 1 1
        2 4 2 1 4
        Matrix C
        41 30 28 47 42
        31 40 30 37 52
        59 58 50 74 78
        31 40 12 41 57
        42 34 16 55 54
        */
        int size = 5;
        MatrixFloat matrix_a = new MatrixFloat(size);
        MatrixFloat matrix_b = new MatrixFloat(size);
        MatrixFloat matrix_expected = new MatrixFloat(size);

        // FIXED TODO Update values to be correct
        float[] matrix_a_data = {
                2.35f, 7.25f, 5.78f, 8.0f, 4.33f,
                5.81f, 0.0f, 5.27f, 2.85f, 5.33f,
                6.42f, 7.84f, 9.63f, 8.21f, 7.45f,
                8.97f, 5.47f, 0.12f, 1.74f, 6.78f,
                7.99f, 9.37f, 2.0f, 6.45f, 4.18f
        };
        float[] matrix_b_data = {
                2.45f, 2.54f, 0.54f, 3.0f, 4.24f,
                0.84f, 0.19f, 0.83f, 2.61f, 0.33f,
                1.71f, 2.49f, 4.18f, 3.99f, 2.23f,
                3.53f, 0.5f, 0.8f, 1.49f, 1.99f,
                2.15f, 4.78f, 2.14f, 1.89f, 4.35f
        };
        float[] matrix_expected_data = {
                59.2808f, 46.4361f, 47.1131f, 69.1384f, 60.0014f,
                44.7662f, 54.7821f, 38.8522f, 52.7775f, 65.2435f,
                83.7807f, 81.4911f, 72.7384f, 104.4595f, 100.0283f,
                47.4957f, 57.4003f, 25.7867f, 57.0723f, 73.0611f,
                62.6218f, 50.2603f, 34.5569f, 73.9164f, 72.4482f
        };

        try {
            matrix_a.set(matrix_a_data);
            matrix_b.set(matrix_b_data);
            matrix_expected.set(matrix_expected_data);
        } catch (Exception ex) {
            fail();
        }
        TimeController time = new TimeController();

        AMatrix matrix_computed = matrix_a.multiply(matrix_b);

        // assert statements
        assertEquals(
                "Result of matrix multiplication must be equal to expected matrix",
                matrix_expected, matrix_computed
        );
    }
}
